//^ /////////////////////////// oled
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>

//^ heart animation
#include <Adafruit_SSD1306.h> //forAnimation

#define i2c_Address 0x3c

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SH1106G display = Adafruit_SH1106G(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


//^ /////////////////////////// pulseSensor
//* เข้า analog pin 0
//* from PulseSensor Playground Getting_BPM_to_Monitor
//* ยังไม่ได้เอาโค้ดขึ้นจอ

#include <PulseSensorPlayground.h>

//  Variables
const int PulseWire = 0;       // PulseSensor PURPLE WIRE connected to ANALOG PIN 0
const int LED = LED_BUILTIN;          // The on-board Arduino LED, close to PIN 13.
int Threshold = 550;

PulseSensorPlayground pulseSensor;

int bpm_val = 0;  // ตัวแปรสำหรับทดสอบแสดงผล

//^ /////////////////////////// gy521
const int MPU_ADDR = 0x68;

int16_t accelerometer_x, accelerometer_y, accelerometer_z;
int16_t gyro_x, gyro_y, gyro_z;

char tmp_str[7];

int steps = 0;

char* convert_int16_to_str(int16_t i) {
  sprintf(tmp_str, "%6d", i);
  return tmp_str;
}

//^ /////////////////////////////////////////
//^ /////////////////////////////////////////
//^ for heart animation
// '0', 20x20px
const unsigned char frame0 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x9f, 0x00, 0x1f, 
	0xff, 0x80, 0x1f, 0xff, 0x80, 0x1f, 0xff, 0x80, 0x1f, 0xff, 0x80, 0x1f, 0xff, 0x80, 0x1f, 0xff, 
	0x80, 0x0f, 0xff, 0x00, 0x07, 0xfe, 0x00, 0x03, 0xfc, 0x00, 0x01, 0xf8, 0x00, 0x00, 0xf0, 0x00, 
	0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '1', 20x20px
const unsigned char frame1 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x3f, 0x00, 0x0f, 
	0x7f, 0x00, 0x1f, 0xff, 0x80, 0x3f, 0xff, 0x80, 0x3f, 0xff, 0x80, 0x3f, 0xff, 0x00, 0x3f, 0xff, 
	0x00, 0x1f, 0xfe, 0x00, 0x0f, 0xfe, 0x00, 0x07, 0xfc, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x78, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '2', 20x20px
const unsigned char frame2 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0xfe, 0x00, 0x00, 0xfe, 0x00, 0x00, 
	0xff, 0x00, 0x0f, 0xff, 0x00, 0x1f, 0xff, 0x00, 0x3f, 0xff, 0x00, 0x3f, 0xfe, 0x00, 0x3f, 0xfe, 
	0x00, 0x3f, 0xfe, 0x00, 0x1f, 0xfe, 0x00, 0x0f, 0xfe, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '3', 20x20px
const unsigned char frame3 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x3f, 0x00, 0x0f, 
	0x7f, 0x00, 0x1f, 0xff, 0x80, 0x3f, 0xff, 0x80, 0x3f, 0xff, 0x80, 0x3f, 0xff, 0x00, 0x3f, 0xff, 
	0x00, 0x1f, 0xfe, 0x00, 0x0f, 0xfe, 0x00, 0x07, 0xfc, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x78, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '4', 20x20px
const unsigned char frame4 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x9f, 0x00, 0x1f, 
	0xff, 0x80, 0x1f, 0xff, 0x80, 0x1f, 0xff, 0x80, 0x1f, 0xff, 0x80, 0x1f, 0xff, 0x80, 0x1f, 0xff, 
	0x80, 0x0f, 0xff, 0x00, 0x07, 0xfe, 0x00, 0x03, 0xfc, 0x00, 0x01, 0xf8, 0x00, 0x00, 0xf0, 0x00, 
	0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '5', 20x20px
const unsigned char frame5 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x3f, 
	0xbe, 0x00, 0x3f, 0xff, 0x00, 0x3f, 0xff, 0x00, 0x3f, 0xff, 0x00, 0x3f, 0xff, 0x00, 0x1f, 0xff, 
	0x00, 0x1f, 0xfe, 0x00, 0x0f, 0xfc, 0x00, 0x07, 0xf8, 0x00, 0x07, 0xe0, 0x00, 0x03, 0x80, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '6', 20x20px
const unsigned char frame6 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x1f, 0xc0, 0x00, 0x1f, 0xc0, 0x00, 0x3f, 
	0xc0, 0x00, 0x3f, 0xfc, 0x00, 0x3f, 0xfe, 0x00, 0x3f, 0xff, 0x00, 0x1f, 0xff, 0x00, 0x1f, 0xff, 
	0x00, 0x1f, 0xff, 0x00, 0x1f, 0xfe, 0x00, 0x1f, 0xfc, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// '7', 20x20px
const unsigned char frame7 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x3f, 
	0xbe, 0x00, 0x3f, 0xff, 0x00, 0x3f, 0xff, 0x00, 0x3f, 0xff, 0x00, 0x3f, 0xff, 0x00, 0x1f, 0xff, 
	0x00, 0x1f, 0xfe, 0x00, 0x0f, 0xfc, 0x00, 0x07, 0xf8, 0x00, 0x07, 0xe0, 0x00, 0x03, 0x80, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 640)
const int epd_bitmap_allArray_LEN = 8;
const unsigned char* epd_bitmap_allArray[8] = {
	frame0,
	frame1,
	frame2,
	frame3,
	frame4,
	frame5,
	frame6,
	frame7
};



void setup() {

//HEART
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();


// pulse setup
  Serial.begin(115200);

  pulseSensor.analogInput(PulseWire);
  pulseSensor.blinkOnPulse(LED);
  pulseSensor.setThreshold(Threshold);

   if (pulseSensor.begin()) {
    Serial.println("We created a pulseSensor Object !");
   }

// led setup
  // Serial.begin(9600);
  if (!display.begin(i2c_Address, true)) {  // สั่งให้จอ OLED เริ่มทำงานที่ Address 0x3C
    Serial.println("SSD1306 allocation failed");
  } else {
    Serial.println("OLED Start Working !!!");
  }

  Serial.begin(9600);
  Wire.begin();
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x6B);
  Wire.write(0);
  Wire.endTransmission(true);
}

void loop() {
// led loop
  display.clearDisplay();              // ลบภาพในหน้าจอทั้งหมด

//heart animation
  display.drawBitmap(100,0,frame0,20,20,WHITE);
  display.display();
  delay(100);
  display.clearDisplay();

  display.drawBitmap(100,0,frame1,20,20,WHITE);
  display.display();
  delay(100);
  display.clearDisplay();

  display.drawBitmap(100,0,frame2,20,20,WHITE);
  display.display();
  delay(100);
  display.clearDisplay();

  display.drawBitmap(100,0,frame3,20,20,WHITE);
  display.display();
  delay(100);
  display.clearDisplay();

  display.drawBitmap(100,0,frame4,20,20,WHITE);
  display.display();
  delay(100);
  display.clearDisplay();

  display.drawBitmap(100,0,frame5,20,20,WHITE);
  display.display();
  delay(100);
  display.clearDisplay();

  display.drawBitmap(100,0,frame6,20,20,WHITE);
  display.display();
  delay(100);
  display.clearDisplay();

  display.drawBitmap(100,0,frame7,20,20,WHITE);
  display.display();
  delay(100);
  display.clearDisplay();

// gy521
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x3B);
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_ADDR, 7*2, true);

  accelerometer_x = Wire.read()<<8 | Wire.read();
  accelerometer_y = Wire.read()<<8 | Wire.read();
  accelerometer_z = Wire.read()<<8 | Wire.read();

  gyro_x = Wire.read()<<8 | Wire.read();
  gyro_y = Wire.read()<<8 | Wire.read();
  gyro_z = Wire.read()<<8 | Wire.read();

  if (gyro_x > 1000 || gyro_y > 1000 || gyro_z > 1000) {
    steps++;
  }

// pulse loop
  pulseSensor.sawStartOfBeat();
  int bpm_val = pulseSensor.getBeatsPerMinute();
  bpm_val = bpm_val / 2;

// led loop (continue)
  display.setCursor(0, 0);
  display.setTextSize(1);
  display.setTextColor(SH110X_BLACK, SH110X_WHITE);  //กำหนดข้อความสีดำ ฉากหลังสีขาว
  display.print("  CareWear  ");

  display.setCursor(0, 20); 
  display.setTextSize(1);
  display.setTextColor(SH110X_WHITE);  //กำหนดข้อความสีดำ ฉากหลังสีขาว
  display.print(bpm_val, DEC);

  display.setCursor(30, 20); 
  display.print(" BPM");

  display.setCursor(0, 40);
  display.setTextSize(1);
  display.setTextColor(SH110X_WHITE);  //กำหนดข้อความสีดำ ฉากหลังสีขาว
  // display.print(bpm_val, DEC); //send step from gyro
  display.print(steps);


  display.setCursor(30, 40); 
  display.print(" Step(s)");


  delay(500);

  display.display();  // สั่งให้จอแสดงผล
}


